{"./":{"url":"./","title":"Voyager套件中文手冊V1.4","keywords":"","body":"Voyager套件中文手冊V1.4 我是哥布林工程師，首先歡迎你閱讀這份 Voyager 1.4 版本文件。這份文件將教你如何去安裝.設定以及使用 Voyager，並讓你獲得建構超酷帶後台的應用！反正就是炫到超乎你的想像... 我們何不趕緊動起來吧！在開始安裝 Voyager 套件之前，你也許想要快速的了解到底什麼是 Voyager，我們將在下一節為你說明。 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-02 16:44:51 "},"kuai-su-kai-shi/shen-me-shi-voyager.html":{"url":"kuai-su-kai-shi/shen-me-shi-voyager.html","title":"什麼是Voyager?","keywords":"","body":"什麼是Voyager? 它是什麼? 作為你Laravel應用的管理介面 提供更簡單的方式來為你的應用提供新增/刪除/修改/查詢資料的功能 提供菜單建構器功能(能為你管理應用裡頭的選單) 將你的檔案納入多媒體管理員 CRUD生成器 Voyager只是為你的Laravel應用提供管理後台。你要怎麼呈現前台網頁完全是你的自由(老實說，它也不會幫你作)。你將會對你的應用保有完全的控制權，而透過Voyager能讓你輕鬆搞定以下任務：增加資料.編輯用戶.建立選單以及所有管理員該做的事情(更棒的是，Voayger還賦予你極高的客製彈性來擴展你的後台功能) 它不是什麼? 一個內容管理系統(CMS) 一個Blog平台 Wordpress Voyager並非CMS或者是Blog平台，但是你還是可以使用它來打造CMS系統又或者是Blog平台，不過Voyager設計的初衷並不只是要作這兩件事情。就如同前一節所說，導入Voyager你仍將具有應用的完全控制權，你可以決定要使用它來實現怎樣的應用。 透過Laravel和Voyager套件的完美組合，你能夠建立任何心中所想的應用，並讓開發過程變得更快而且簡單。 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"kuai-su-kai-shi/tao-jian-xu-qiu.html":{"url":"kuai-su-kai-shi/tao-jian-xu-qiu.html","title":"套件需求","keywords":"","body":"套件需求 在安裝Voyager套件到你的Laravel應用之前，請確保你的Laravel是以下的版本： Laravel 6 Laravel 7 Laravel 8 除此之外，也要確定你使用的PHP版本是7.3或更新的版本 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"kuai-su-kai-shi/ji-ben-an-zhuang.html":{"url":"kuai-su-kai-shi/ji-ben-an-zhuang.html","title":"基本安裝","keywords":"","body":"基本安裝 安裝Voyager套件是非常容易的，你可以使用以下指令來為你的Laravel應用加入Voyager套件 composer require tcg/voyager 接下來，請確保建立一個新的資料庫並在.env檔案裡頭加入驗證相關參數(帳號.密碼.資料庫名稱等等)，如果之前就有建則是可以直接使用。除此之外，也請確保在.env檔案裡頭有APP_URL這個參數，並且這個網址應該指向到應用的首頁 \\\\.env APP_URL=http://localhost DB_HOST=localhost DB_DATABASE=homestead DB_USERNAME=homestead DB_PASSWORD=secret 接著，提醒你要先把應用的預設語系改為繁體中文，這樣等會在安裝Voyager套件的時候，後台的語言才會是中文喔，倒過來作可是不行的。請開啟confg/app.php，找到語系和時區(順便改，非必須)改成支持我們習慣的設定 \\\\config\\app.php 'timezone' => 'Asia/Taipei', 'locale' => 'zh_TW', 最後，我們就能夠開始安裝Voyager套件了。你能夠選擇在安裝時要不要連同假資料一併生成。假資料將會包含一個管理員帳號(假如沒有用戶資料的話)，1個示範頁面，4個示範文章，2個分類以及7個設定。 如果要安裝套件但不生成假資料，只需要輸入以下指令： php artisan voyager:install 假如你傾向於安裝套件一併生成假資料，則改輸入以下指令： php artisan voyager:install —with-dummy ⚠ 警告 當出現 Specified key was too long error 這樣的錯誤訊息... 當你看到這樣的錯誤訊息代表你使用的是舊版的MySQL，你可以使用這個網址的解決方案： https://laravel-news.com/laravel-5-4-key-too-long-error 這樣就差不多完成囉! 你可以使用 php artisan serve 來開啟一個本地開發伺服器，並且開啟瀏覽器輸入網址 http://localhost:8000/admin來訪問後台 假如你有生成假資料的話，將會生成一個管理員帳號，你可以使用以下口令來進行登入 email: admin@admin.com password: password &#x1F4A1;快速筆記 假資料管理員帳號只有在你的資料庫沒有任何用戶時才會產生 假如你沒有生成假資料帳戶，你或許會希望能分配管理員權限到一個已存在的用戶，你可以透過以下指令來輕鬆做到這點： php artisan voyager:admin your@email.com 假如你想要建立一個新的管理員用戶，你可以加上 --create參數，像這樣： php artisan voyager:admin your@email.com - -create 接下來在終端機就會以互動問答的方式來要求你輸入帳戶資料 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-02 16:23:17 "},"kuai-su-kai-shi/jin-jie-an-zhuang.html":{"url":"kuai-su-kai-shi/jin-jie-an-zhuang.html","title":"進階安裝","keywords":"","body":"進階安裝 這一節是針對那些想要安裝Voyager套件到已經存在的舊Laravel專案，或者是想要自己進行手動安裝的用戶。假如這不是你的情況，你可以退回上一節又或者是跳過這一節。 第一件事情要做的是要把Voyager的素材檔案佈署到專案裡頭，你能夠透過以下指令輕鬆做到這一點。 php artisan vendor:publish - -provider=“TCG\\Voyager\\VoyagerServiceProvider\" php artisan vendor:publish - -provider=“Intervention\\Image\\ImageServiceProviderLaravelRecent\" 下一步，呼叫 php artisan migrate 來遷移所有Voyager的表格 &#x1F4A1;快速筆記 假如你有需要修改Migration檔案，比如你想要使用其他表格而非users來儲存用戶資料，不要進行遷移。相對的，將Voyager的Migration檔案複製進到database/migrations，進行你的修改，然後關閉設定選項database.autoload_migrations，最後才進行遷移 現在，開啟你的User模型(通常是app/User.php 又或者是app/Models/User.php)，並讓這個類別改為繼承\\TCG\\Voyager\\Models\\User而非原先的Authenticatable 在下一步，你需要加入Voyager路由到你的routes/web.php檔案裡頭 現在呼叫 php artisan db:seed --class=VoyagerDatabaseSeeder來生成需要的資料 呼叫 php artisan hook:setup 來安裝 hooks系統 呼叫 php artisan storage:link來建立 storage捷徑到public資料夾內 最後，呼叫 composer dump-autoload來完成你的安裝! Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"kuai-su-kai-shi/she-ding-1.html":{"url":"kuai-su-kai-shi/she-ding-1.html","title":"設定","keywords":"","body":"設定 當你安裝完Voyager，你將能找到一個新的設定檔案 config/voyager.php。在這個檔案裡頭你將能夠找到各類的選項來讓你修改Voyager的安裝設定。 💡快速筆記 假如你發現設定檔被快取了，請記得在修改完設定之後，呼叫 php artisan config:clear 接下來我們將會好好的來看這個設定檔，並對這些設定選項加以詳細說明。 使用者 add_default_role_on_register: 是否要在建立一個新使用者時為其賦予一個預設的角色 default_role: 預設的角色名稱 admin_permission: 要能夠進到後台所需要具備的權限 namespace: 應用的使用者模型的命名空間 redirect: 當使用者登入之後要轉址到哪裡 控制器 你能夠指定Voyager套件的預設控制器命名空間。假如你想要複寫任何一個Voyager的核心控制器，你能夠複製Voyager的控制器檔案，並修改這個設定到你自定義控制器所在的位置 💡複寫單一控制器 假如你只想要複寫單一個控制器，你可以考慮加入以下程式碼到你的AppServiceProvider類別裡頭的register方法。 $this->app->bind(VoyagerBreadController::class,MyBreadController::class); 模型 你能夠指定你模型的命名空間又或者是位置。這將在Voyager的資料庫管理員為你建立Model模型時會用到，如果不設定的話舊會使用預設的應用命名空間。 素材 你可能想要去指定不同的素材路徑，比如你的網站是放在子資料夾之下就需要把該資料夾作為路徑的起始。又比如假如你想要複寫這些素材以進行客製的話也需要設定這個 💡升級Voyager套件 當升級到更新的Voyager版本時，座落於/vendor/tcg/voyager/assets資料夾的素材們就需要作複寫。因此當你客製好了新的素材樣式之後，就需要把新素材所在位置設定在這裡 儲存 預設Voyager套件使用public本地儲存庫。你能夠指定去使用任何一個在你的config/filesystems.php裡頭所設定的儲存機制。這意味著你可以使用S3.Google Cloud Storage或者任何一個你想要使用的儲存系統 資料庫 你可能想要在Voyager的資料庫管理員隱藏一些表格。在這個地方你可以指定哪些表格需要被隱藏。至於autoload_migrations允許你在執行 php artisan migrate 指令時去排除Voyager的遷移檔 多語系 你能夠設定是否要開啟多語系功能。除此之外，你也能夠去指定預設使用的語言以及所要需要支持的語系。 這裡可以了解更多的多語系資訊，請點這裡. 資訊面板 在資訊面板的設定部分，你可以加入navbar_items ，讓 data_tables支援responsive，並且管理你的所有widget 'navbar_items'讓你編輯用戶下拉選單的各個項目，比如 'route'用來決定該項目的連結, 'icon_class'設定該項目的Icon圖案 'target_blank'則決定了點擊後是否要開啟新的視窗 (未證實)如果你把data_tables的responsive設為true的話，就可以讓datatables的顯示支持RWD widgets這邊你能管理所有顯示在資訊面板的widget。如果不曉得該怎麼撰寫widget類別，你可以到 tcg/voyager/src/Widgets這個資料夾來參考範例Widget類別是怎麼寫的 主色系 Voyager管理資訊面板的主色系是淡藍色，你能夠透過修改 primary_color屬性來設成你想要的顏色 顯示開發者提示 在Voyager的管理後台有不少的開發者提示訊息又或者是通知來告訴你該如何去取得某些Voyager參數。如果你不想要顯示這些提示的話，可以把 show_dev_tips設為false 額外的樣式 你能夠加入你自定義的樣式表用來調整Voyager後台，這表示你能夠為Voyager後台設計出全新的主題風格。 如需了解更多，可以參考 這裡. 額外的JS腳本 就跟先前的額外樣式相同。你可以加入你自己的JS腳本用以在Voyager後台執行，你可以根據你的需要加入多個腳本進去 如需了解更多，可以參考 這裡. Google地圖 這裡有一個新的資料類型 coordinates，它允許你去加入一個Google地圖。使用者能夠透過拖拉地圖上大頭釘的方式來將經緯度存到資料庫裡頭。 在這個設定你能夠設定Google地圖Key以及中心點座標。預設是把這些設定放在.env檔案裡頭。 允許的Mimetypes 要允許哪些檔案能夠透過多媒體管理員來進行上傳，你可以定義 allowed_mimetypes 使用者只能夠上傳檔案格式有列在裡頭的檔案類型之內容，如果需要允許所有類型的內容，可改用以下設定 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-02 16:19:14 "},"bread/jian-jie.html":{"url":"bread/jian-jie.html","title":"簡介","keywords":"","body":"簡介 當加入或編輯某個當前資料庫表格的BREAD，你將會看到它的BREAD資訊。裡頭允許你去設定顯示名稱.Slug.Icon.模型.控制器的命名空間以及政策名稱。你也能夠選擇是否要生成該BREAD的權限 當你把畫面往下滑時你將會看到表格的每一個欄位，在這裡你將能夠設定各欄位在各個頁面是否要呈現或編輯 BROWSE (欄位將會出現在顯示表格所有資料的頁面) READ (欄位將會出現在顯示某一筆資料的頁面) EDIT (欄位將會出現在編輯某一筆資料的頁面，並允許你去更新該欄位資料) ADD (欄位將會出現在新增一筆資料的頁面) DELETE (尚不清楚作用為何) 你還可以選擇各個欄位要使用哪種類型的輸入項。比如說有 textBox單行文字輸入項. textArea多行文字輸入項. theckbox勾選輸入項. image圖片輸入項等等非常多的類型可供選擇 除此之外，這些輸入項可能會需要一些額外的細節又或者是選項，比方說checkbox勾選輸入項. dropbox下拉選單. radio button選擇輸入項. 以及image圖片，這時候就會用到最後面的\"可選細項\"，以下有更多說明 Validation 驗證 在每個欄位的可選細項裡，你可以透過簡單的JSON格式來加入Laravel內建的驗證規則。這裡是一個例子來告訴你要如何加入一個上限長度為12的驗證規則： { \"validation\": { \"rule\": \"required|max:12\" } } 或許，你還想要為這些驗證規則加入自定義的錯誤訊息(因為預設的錯誤訊息都是英文的)，你可以這樣達成： { \"validation\": { \"rule\": \"required|max:12\", \"messages\": { \"required\": \"This :attribute field is a must.\", \"max\": \"This :attribute field maximum :max.\" } } } 你當然可以加入更多的驗證規則，像這樣： { \"validation\": { \"rule\": [ \"required\", \"max:12\" ] } } 想要為新增與編輯加入不同的驗證規則?沒問題，你可以這樣做到: { \"validation\": { \"rule\": \"min:3\", \"edit\": { \"rule\": \"nullable\" }, \"add\": { \"rule\": \"required\" } } } 如需找到更多Laravel所支持的驗證規則，請參考這裡 Tagging 標籤 Tagging讓你能夠為多對多關係的欄位去加入新的項目，比如說文章的標籤，使用時機是在編輯或新增頁面 要開啟這個功能，你只需要在關聯資料視窗去把Allow Tagging設為true 之後你就能夠在選擇輸入項內去輸入任何文字，並在按下Enter之後加入新的項目與關係 請特別注意： 這功能並非萬能，它只會幫你把輸入的文字存入顯示欄位(display-column)，所以你必須確保其他的欄位有預設值或者是可為空值，以免新建時出現SQL錯誤 排序 BREAD 項目 你能夠定義在顯示所有資料頁面的資料排序，透過拖拉的方式。 為此你必須先改變你在BREAD的設定： 順序欄位(Order column)是你的表格用來儲存順序的欄位，通常型態都是integer整數 顯示順序欄位(Order display column)是要在排序編輯頁面用來代表該資料的文字，一般都是用標題或名字 排序方式(Order direction)是用來設定排序方式，有兩種分別是從小到大(asc)或從大到小(desc) 按下順序按鈕將會開啟讓你排序資料的頁面： 設置預定義結果過濾(Scope browse-results) 假如你想要在顯示所有資料的頁面去加入過濾功能，你能夠在模型類別裡頭加入一個Scope 比如說你只想要看到該使用者所張貼的文章，你就可以定義這樣的Scope: \\\\app\\Models\\User.php public function scopeCurrentUser($query) { return $query->where('author_id', Auth::user()->id); } 接下來，回到文章posts的BREAD設定頁面，找到Scope輸入項並選擇currentUser 在你完成儲存之後，回到Browse頁面將只會看到你所撰寫的文章囉 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"bread/guan-lian.html":{"url":"bread/guan-lian.html","title":"關聯","keywords":"","body":"關聯 加入一個關係 使用BREAD建構器，你能夠輕易地建立表格間的關係。在BREAD設定頁面的底部你將會找到一個\"創建關係\"的按鈕。 注意 當你尚未建立好該表格的BREAD設定前請不要作這個操作。正確作法是先把第一次的BREAD設定完成後儲存，再回來這個頁面去加入關係的動作。否則你將會看到像下面這樣的通知訊息： 所以當你已經建立好BREAD設定之後，你就能夠為表格去建立一個新關係了。當按下\"創建關係\"按鈕，將會看到一個像這樣的視窗跳出來 你首先要決定關係的類型為何，是一對一還是一對多? 其次你要選擇所要關聯的表格是哪一個以及它的模型命名空間，比如\\App\\Models\\Tag.php 接下來你選擇表格是用哪一個欄位，也就是外鍵，來建立關係 你還可以決定哪一個欄位要用來顯示在下拉選單又或者是多選項裡頭，以及關聯資料要儲存在哪一個欄位裡頭，通常還是外鍵欄位 就這樣，你可以輕易的利用Voyager幫你建立一對一.一對多.多對多的表格關係 進階設定 假如你希望為多對多關係去加入進階設定，你只需要在儲存好關係之後，回到BREAD設定頁面，找到該關係欄位的\"可選細項\"，加入類似以下的設定： { \"foreign_pivot_key\": \"user_id\", \"related_pivot_key\": \"role_id\", \"parent_key\": \"id\" } 排序關係 (目前測試沒有作用)你可以排序關聯的結果透過在關係的可選細項設定排序物件，比如以下根據sort欄位來進行從小到大排序： { \"sort\": { \"field\": \"sort\", \"direction\": \"asc\" } } 過濾關聯資料 你可以輕鬆的過濾關聯資料透過在關聯模型去定義local scope 舉例來說，假如你想要只顯示有效的資料，可以建立一個像這樣的scope: public function scopeEnabled($query) { return $query->where('enabled', 1); } 接著在關聯的可選細項加入以下設定 And add the following to the relationship options: { \"scope\": \"enabled\", } 要填入的值是你scope方法的名稱去掉scope關鍵字。比如scopeEnabled()就是enabled，E要變小寫 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"bread/lan-wei-tong-yong-she-ding/":{"url":"bread/lan-wei-tong-yong-she-ding/","title":"欄位通用設定","keywords":"","body":"欄位通用設定 表單欄位是Voyager套件的BREAD系統核心 每一個formfield都代表了你資料庫表格的一個欄位，也作為BREAD的一個輸出/入 如需要進行你formfield的調整，可以透過在\"可選細項\"加入JSON格式的設定，以下會進行詳細的說明 所有的formfield都具備的好用選項如下： 描述Description 所有的輸入項都支持描述讓你能夠有個地方向使用者說明究竟這個輸入項是做什麼用的，這不是必須的，如果需要的話，可加入以下設定 All formfields share a handful options: { \"description\": \"輸入項的輸入提示\" } 顯示 有一些選項能夠讓你改變這些輸入項在BREAD頁面顯示的方式。你能夠加入一個display作為JSON物件，並在其加入width來變更輸入項的長度，又或者加入id來設定輸入項標籤的ID屬性 { \"display\": { \"width\": \"3\", \"id\": \"custom_id\" } } 寬度和Bootstrap一樣是採用12欄系統，所以上限是12。如果你希望讓輸入項的長度為畫面的1/4的話，就設定為3 當你設定id之後，就會有一個div標籤包著輸入項，div標籤就帶著id屬性，內容為你指定的custom_id，例如： 預設值 大部分的輸入項都允許你在新增一筆資料時去定義其預設值 { \"default\" : \"Default text\" } 空值 你也許想要以空值null來存入資料庫欄位而非空字串。作法很簡單，你只要在可選細項加入以下設定： { \"null\": \"\" } 根據我的測試，輸入項預設就會把空字串轉成null，所以上面的設定可以不用加 有些情況你需要把某些內容轉為null，比如說當使用者輸入Nothing的時候，不要存入Nothing到資料庫，而是null，可在可選細項加入以下設定： { \"null\": \"Nothing\" } 生成Slugs 使用BREAD建構器，你也許希望能夠為某些輸入自動生成slug。比如說你有一些文章，它們有標題以及slug。假如你希望能夠自動根據標題屬性來生成slug，你可以在slug欄位的可選細項加入以下設定： { \"slugify\": { \"origin\": \"title\", \"forceUpdate\": true } } 這將會在變更title欄位時自動的生成slug值。假如slug值已經存在了，只有在forceUpdate設為true時才會更新，預設為false 這個功能不支持中文，需要特別注意 自定義視圖 你可以設定自定義視圖來顯示輸入項，為此你可以加入view屬性來指定視圖檔案： { \"view\": \"my_view\" } 這將會從resources/views去載入my_view視圖而不是輸入項的預設視圖 你將會得到大量的參數提供給你的視圖： $view 可以是browse, read, edit, add 或者是 order $content 輸入項的內容 $dataType DataType，也就是表格類別 $dataTypeContent 模型實例 $row 資料實例 $options 某資料表欄位的可選細項 你有開發自定義輸入項? 假如你有開發自定義輸入項，並且希望能夠在BREAD設定頁去客製它們，你可以在這些自定義書輸入項類別裡的createContent()，去取用$options參數來判斷 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"bread/lan-wei-tong-yong-she-ding/checkbox-multiple-checkbox-radio.html":{"url":"bread/lan-wei-tong-yong-she-ding/checkbox-multiple-checkbox-radio.html","title":"Checkbox/Multiple Checkbox/Radio","keywords":"","body":"Checkbox/Multiple Checkbox/Radio Checkbox { \"on\" : \"On Text\", \"off\" : \"Off Text\", \"checked\" : true } 在Voyager，Checkbox會以toggle開關這種樣貌來呈現，你可以設定開或關要顯示的文字內容。假如checked設為true的話該輸入項會設為開啟，否則預設是關閉的 Multiple Checkbox { \"checked\" : true, \"options\": { \"選項1的值\": \"選項1的顯示文字\", \"選項2的值\": \"選項2的顯示文字\" } } 你能夠根據你的需要去建立\b多個Checkbox Radio Button { \"default\" : \"選項1的值\", \"options\" : { \"選項1的值\": \"選項1的顯示文字\", \"選項2的值\"\": \"選項2的顯示文字\" } } Radio Button的用法和dropdown完全相同，你可以設定一個預設值當沒有輸入的時候可以用，而選項的部分可以透過options屬性來提供 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"bread/lan-wei-tong-yong-she-ding/coordinate.html":{"url":"bread/lan-wei-tong-yong-she-ding/coordinate.html","title":"Coordinate","keywords":"","body":"Coordinate 這個我沒有用過，應該是用來設定地圖的經緯度座標，需要搭配資料庫欄位的設定才能夠正常執行，以下僅根據文件來進行簡要翻譯 showLatLngInput / showAutocompleteInput 是否要開啟自動完成輸入以及經緯度輸入功能，預設為true { \"showAutocompleteInput\": false, \"showLatLngInput\": false } onChange 當改變時要觸發什麼JS方法，比如當使用自動完成地址來重設另一個輸入項選單就會用到，觸發間隔約為0.3秒 { \"onChange\": \"myFunction\" } 第一個參數是事件類型，類型有\"mapDragged\". \"latLngChanged\". \"placeChanged\" 第二個參數則是資料物件，包含lat.lng和place屬性 function myFunction(eventType, data) { console.log('eventType', eventType); console.log('data.lat', data.lat); console.log('data.lng', data.lng); console.log('data.place', data.place); } Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"bread/lan-wei-tong-yong-she-ding/date-and-time.html":{"url":"bread/lan-wei-tong-yong-she-ding/date-and-time.html","title":"Date & Time","keywords":"","body":"Date & Time { \"format\" : \"%Y-%m-%d\" } date和timestamp這兩個輸入項讓你用來輸入日期，上面的JSON能讓你去設定日期輸出的格式。這允許你去在browse和read這兩個頁面去顯示日期，使用Carbon套件的formatLocalized() Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"bread/lan-wei-tong-yong-she-ding/dropdown.html":{"url":"bread/lan-wei-tong-yong-she-ding/dropdown.html","title":"Dropdown","keywords":"","body":"Dropdown { \"default\" : \"選項1的值\", \"options\" : { \"選項1的值\": \"選項1的文字\", \"選項2的值\": \"選項2的文字\" } } 這是下拉選單，用來顯示多個選項讓使用者選擇，上方的JSON格式包含default和options這兩個key。 default能用來設定當使用者沒有選擇時採用的預設值 options用來設定下拉的選項，左邊的key是要傳到Server的值，而右邊的則是顯示在前台的文字內容 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"bread/lan-wei-tong-yong-she-ding/images.html":{"url":"bread/lan-wei-tong-yong-she-ding/images.html","title":"Images","keywords":"","body":"Images { \"resize\": { \"width\": \"1000\", \"height\": null }, \"quality\" : \"70%\", \"upsize\" : true, \"thumbnails\": [ { \"name\": \"medium\", \"scale\": \"50%\" }, { \"name\": \"small\", \"scale\": \"25%\" }, { \"name\": \"cropped\", \"crop\": { \"width\": \"300\", \"height\": \"250\" } } ] } image輸入項有很多的選項，但是不用擔心，你是可以不需要設定任何選項，圖片同樣可以完成上傳。但是，如果你想要進行圖片的尺寸修改.設定圖片的\b壓縮比.建立縮圖的話，你還是需要去設定選項 需要修改尺寸的話，你需要加入resize物件。假如你設定寬或高為null，這將會維持圖片原本的寬或高比例。而上方例子把width設為1000像素，但是把height設為null。這將把width寬度重新設定為1000像素，而height則是根據原先寬高比來重新調整 假如你想要進行圖片的壓縮就能夠透過quality屬性。一般來說將壓縮比設定在70%~100%之間是感覺不出來的，但卻可以大幅度的降低圖片的大小 upsize為圖片放大開關，這屬性只有在你有加入resize物件設定才會有效。比如說你設定resize的width為1000像素，但是圖片卻是小於這個尺寸的話，預設情況下圖片是不被被進行放大的。但是假如你設定upsize為true的話，圖片就有可能會根據你resize的設定來進行放大 thumbnails就比較複雜了，裡頭的陣列包含多個物件。每一個物件都是一個要生成的縮圖，包含2個值，分別是名字以及縮圖比例，這名字將會被用在縮圖的檔名裡頭。打個比方來說，你上傳一個名為ABC.jpg，那縮圖將命名為ABC-medium.jpg。percentage則是你希望將縮圖壓縮多少比例，是以百分比的方式 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"bread/lan-wei-tong-yong-she-ding/media-picker.html":{"url":"bread/lan-wei-tong-yong-she-ding/media-picker.html","title":"Media Picker","keywords":"","body":"Media Picker 這是一個重量級的輸入項，我個人很喜歡也常用，同時有大量的選項可以設定，所以也是有些複雜 選擇圖片 你能夠透過這個輸入項來上傳又或者是使用伺服器內已有的圖片素材，要注意的是選擇是要點圖片2次，確定圖片有如下圖這樣出現，才是有選取到的喔 如果需要調整它的預設行為的話，你可以在可選細項加入以下選項： { \"max\": 10, \"min\": 0, \"expanded\": true, \"show_folders\": true, \"show_toolbar\": true, \"allow_upload\": true, \"allow_move\": true, \"allow_delete\": true, \"allow_create_folder\": true, \"allow_rename\": true, \"allow_crop\": true, \"allowed\": [], \"hide_thumbnails\": false, \"quality\": 90, \"watermark\": { \"source\": \"...\", \"position\": \"top-left\", \"x\": 0, \"y\": 0 } } 名稱 描述 類型 預設值 base_path 相對於storage/app/public的路徑 字串 /bread-slug/ rename 將上傳後的圖片根據規格來進行改名 字串 原始名稱 delete_files 當使用的資料被刪除時把該圖檔刪除，請慎用 布林 false show_as_images 是否要在Browse頁面以圖片而非網址路徑的形式來呈現 布林 false min 最少需要選定的圖片數量 整數 0 max 最多可以選定的圖片數量 整數 0 expanded 輸入項介面預設是否展開 布林 false show_folders 是否要顯示資料夾 布林 true show_toolbar 是否顯示工具列 布林 true allow_upload 是否要允許使用者上傳新檔案 布林 true allow_move 是否要允許使用者搬移檔案/資料夾 布林 true allow_delete 是否要允許使用者刪除檔案/資料夾 布林 true allow_create_folder 是否要允許使用者建立新資料夾 布林 true allow_rename 是否要允許使用者進行檔案更名，請慎用 布林 true allow_crop 是否要允許使用者進行圖片的修剪 布林 true hide_thumbnails 隱藏已知的縮圖，將它們作為原圖的子圖來看待 布林 true quality 設定圖片上傳與產生縮圖時的壓縮比 整數 90 allowed 可被上傳或選擇的檔案類型，如為空物件代表支持所有檔案類型，如果檔案型態沒列在裡頭的檔案將不會被顯示 物件 [] 允許的類型 Allowed types 如果你希望使用者只能夠上傳某些特定類型的檔案，你可以利用 \"allowed\"這個屬性來達，比如設定為[\"image\", \"audio\", \"video\"]又或者是連同檔名版本的[\"image/jpeg\", \"image/png\", \"image/bmp\"] 表達式 Expression 像是選項裡頭的 base_path 和 rename 都可以加入下面的替換符號： {pk}該資料的主鍵，只有base_path能用 {uid}當前登入使用者的id {date:format} 以所定義格式來呈現的當前時間，例如{date:Y.m.d} {random:N}以指定字元數N來組成的隨機字串 所以一個 base_path可以設成像是以下的形式 { \"base_path\": \"/my-bread/{pk}/{date:Y}/{date:m}/\" } 浮水印 Watermark 浮水印可以用來加在上傳的圖片上頭。要啟用這個功能，你需要定義一個來源屬性，它的所在位置是相對於Voyager的檔案系統的，預設也就是在storage/app/public這一層裡頭。這裡有一些可選擇的選項你能夠用到： position 決定浮水印要顯示的問題，可以是: top-left 左上角，此為預設 top 上方 top-right 右上角 left 左邊 center 中央 right 右邊 bottom-left 左下角 bottom 下方 bottom-right 右下角 x 水平位移量 x屬性能設定浮水印要根據position的設定來調整多少水平位移，預設為0 y 垂直位移量 y屬性能設定浮水印要根據position的設定來調整多少垂直位移，預設為0 size 浮水印大小 浮水印的大小應該為原圖大小的比例，預設為15 縮圖 Thumbnails 你能夠為每一個上傳的圖片來生成縮圖，它會有三種類型： Fit Fit結合了 cropping和 resizing 來找到最好的方式來生成縮圖以符合你的比例。 你一定要設定width，而height和position則是可選擇的。 以下是一個fit類型的例子： { \"thumbnails\": [ { \"type\": \"fit\", \"name\": \"fit-500\", \"width\": 500, // 必須 \"height\": 500, // 非必須 \"position\": \"center\" // 非必須. Refer to http://image.intervention.io/api/fit } ] } 當完成以上設定之後進行圖片上傳，點選原圖你就會看到這樣的提示 而在這個例子裡頭，該資料夾除了有girl1.jpeg，還會多一個名為girl1-fit-500.jpeg 剪切 Crop 根據所給定的尺寸和位置來剪切圖片。你必須提供width和height，而x和y則是可選擇給不給。一個Crop的例子像這樣： { \"thumbnails\": [ { \"type\": \"crop\", \"name\": \"crop-500-500\", \"width\": 500, // Required \"height\": 500, // Required \"x\": 50, // Optional. Left offset \"y\": 50, // Optional. Top offset } ] } 重設大小 Resize 根據尺寸來重設圖片的大小，你必須設定width，height則是可選項。這是一個Resize的例子： { \"thumbnails\": [ // 寬度將會是 500px, 而高度將會根據圖片的比例計算而得 { \"type\": \"resize\", \"name\": \"resize-500\", \"width\": 500, \"upsize\": true // 非必須. 設為false，來避免圖片被放大 }, // 重設大小為 500x500px { \"type\": \"resize\", \"name\": \"resize-500-500\", \"width\": 500, \"height\": 500 }, // 高度將會是 500px, 而寬度將會根據圖片的比例計算而得 { \"type\": \"resize\", \"name\": \"resize-500\", \"width\": null, \"height\": 500 } ] } 而浮水印也同樣會被加到縮圖裡面去。只要定義浮水印的選項並且設定watermark為true，到每一個你想要加入浮水印的縮圖裡面去 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"bread/lan-wei-tong-yong-she-ding/number.html":{"url":"bread/lan-wei-tong-yong-she-ding/number.html","title":"Number","keywords":"","body":"Number { \"step\" : 0.1, \"min\" : 0, \"max\" : 10 } 這些是數字輸入項的標準屬性，但是目前測試的版本似乎這些屬性沒有作用，尚待觀察 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"bread/lan-wei-tong-yong-she-ding/tinymce.html":{"url":"bread/lan-wei-tong-yong-she-ding/tinymce.html","title":"TinyMCE","keywords":"","body":"TinyMCE 假如你想要客製Voyager裡頭的TinyMCE輸入項，你能夠在你的voyager設定檔內加入額外的JS檔案。在這個檔案你必須定義一個像這樣的方法 function tinymce_init_callback(editor) { //... } 假如你需要在TinyMCE初始化之前去調整它，你可以使用以下方法 function tinymce_setup_callback(editor) { //... } 假如你想要客製TinyMCE的初始化設定選項，你可以在BREAD的可選細項內去合併你的設定，像這樣： { \"tinymceOptions\" : { \"name\": \"value\" } } 假如你想要在rich_text_box以外的輸入項去使用tinyMCE，你需要去進行初始化，使用：tinymce.init(window.voyagerTinyMCE.getConfig()); 至於相關可用的變數.函式與設定選項，可以參考TinyMCE文件 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"he-xin-guan-nian/lu-you-routing.html":{"url":"he-xin-guan-nian/lu-you-routing.html","title":"路由Routing","keywords":"","body":"路由Routing 在執行Voyager的安裝指令後，你將會看到一些新的路由規則被加到你的routes/web.php檔案內，長得大致像這樣： Route::group(['prefix' => 'admin'], function () { Voyager::routes(); }); 這段程式碼是用來渲染 Voyager所需的路由的，你可以改變admin前綴如果你想要的話，也可以為這些路由規則去設置，比如中介層或網域 當建立一個新的BREAD類型，並設定它的slug之後，你就能夠透過以下的路徑來訪問這些路由： URL/admin/slug-name 舉個例子來說明，假如我們有一個產品表格products，我們會設定它的slug為products，你就能夠透過以下網址來訪問它： URL/admin/products 注意 你可能在後台選單看不到你新建路由連結或BREAD。為了要為你的後台選單建立一個新的選項可以參考menu章節的文件 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"he-xin-guan-nian/duo-mei-ti-guan-li-yuan-media-manager.html":{"url":"he-xin-guan-nian/duo-mei-ti-guan-li-yuan-media-manager.html","title":"多媒體管理員 Media Manager","keywords":"","body":"多媒體管理員 Media Manager Voyager套件擁有一個成熟的多媒體管理員允許你去上傳.更名以及刪除檔案，你也能夠加入新資料夾並移動檔案與資料夾。 基本上任何其他媒體管理員能做的事情，Voyager的多媒體管理員都能夠為你做到。 有個小技巧是你能夠拖移檔案到\"upload\"按鈕來上傳多個檔案 透過設定，這個多媒體管理員還允許你在上傳檔案時順道建立縮圖或加入浮水印 歡迎參考 media-picker 文件來了解更多設定有關的細節，連結在此 注意上傳檔案的大小 假如你在上傳大檔的時候遇到錯誤，這代表在PHP伺服器裡頭有設定需要調整，去把php.ini檔案裡頭，max_file_upload 和file_upload_size這兩個設定大小調到足夠大，或者直接調成-1，表示不限定大小 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"he-xin-guan-nian/xuan-chan-yu-jian-gou-qi.html":{"url":"he-xin-guan-nian/xuan-chan-yu-jian-gou-qi.html","title":"選單與建構器","keywords":"","body":"選單與建構器 透過Voyager你能夠簡單的去為你的應用去建立選單，事實上Voyager後台的左側選單就是透過選單建構器所建立出來的 你能夠看到目前有哪些選單透過點擊工具->選單管理按鈕。你能夠新增.編輯或刪除任何當前選單。這代表你能夠為你網站的header.sidebar.footer去建立它們的選單，而且不限定數量 當你準備好要為你的選單建立項目，你能夠點該選單的建構器按鈕 這將會帶你到選單建構器，在那裡你可以新增.編輯與刪除選單項目 在建構好你的選單資料後，你能夠輕易的實作你應用裡的前台選單。比如說我們有一個選單資料叫做main，當我們需要在任何視圖去取得這個選單的資料時，只需要呼叫以下程式就能輸出一個選單標籤： menu('main'); 這個選單標籤是一個無樣式的ul>li結構。假如你有使用bootstrap來為你的網頁應用設定樣式，你能夠在menu()的第二參數去傳入bootstrap來說明你想要用Voyager內建的bootstrap版本的menu視圖而非無樣式版本視圖，像這樣： menu('main', 'bootstrap'); 如果這樣還不能滿足你的話，你還能夠自己撰寫自己的menu視圖。比如說你自己新增了一個menu視圖，位置在resources/views/my_menu.blade.php，裡頭是這樣寫的： @foreach($items as $menu_item) link() }}\">{{ $menu_item->title }} @endforeach 當你想要在任何視圖去呈現自己開發的選單時，只需要呼叫這段程式碼即可 menu('main', 'my_menu'); 你就會看到你定義的選單被呈現在前台囉 JSON格式的選單資料 假如你想要的是把選單資料轉成JSON格式來提供給API而不需要標籤結構，那麼這個技巧就非常的適合你 menu('main', '_json') 它將會回傳給你一個集合，裡頭是所有的選單項目 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"he-xin-guan-nian/zi-liao-ku-guan-li-yuan.html":{"url":"he-xin-guan-nian/zi-liao-ku-guan-li-yuan.html","title":"資料庫管理員","keywords":"","body":"資料庫管理員 Voyager有一些好用的資料庫工具能夠讓你輕鬆的新增.編輯與刪除當前資料庫的表格。另一個強大的工具是你能夠為你任何的表格加入BREAD功能，也就是表格的新增.刪除.修改.查詢資料功能 在你的Voyager後台，能夠去拜訪工具->資料庫就會看到一個介面，裡頭列出所有當前資料庫的表格 你也能夠點\"建立新表\"來建立新的表格，要注意的是所有表格使用的編碼方式都是採用你預設的資料庫連線設定 假如你點了表格名稱就能夠看到該表的結構。除此以外，在這個介面你也能夠看到查看.編輯與刪除該表的按鈕 你也能夠選擇去為所有的資料庫表格去新增BREAD功能。一旦該表已經具備BREAD功能，你還能夠選擇去編輯或刪除該表的BREAD功能 你可以在下一個章節看到更多關於BREAD建構器的資訊 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"he-xin-guan-nian/she-ding.html":{"url":"he-xin-guan-nian/she-ding.html","title":"設定","keywords":"","body":"設定 Voyager的設定功能允許你加入任何應用所需要的設定。比如你可以加入一個圖片上傳的設定來管理網站的logo，或者是一個文字輸入項來管理首頁的標題 在這個新的版本你能夠將這些設定分成不同的群組。打個比方，假如你在名為\"site\"的這個群組加入一個key名為\"title\"的設定，那麼你就能夠透過以下的程式碼來取得這個設定資料： 又假如想要在 Blade裡頭使用的話，你可以改成這樣寫 {{ setting('site.title') }} 現在你學會如何在後台去管理你的應用設定，並輕鬆的在前台去取用這些資料了 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"he-xin-guan-nian/zhi-nan-zhen.html":{"url":"he-xin-guan-nian/zhi-nan-zhen.html","title":"指南針","keywords":"","body":"指南針 指南針頁面是一個好地方，讓你取得一些參考資料連結.文字樣式類別.執行Artisan指令，甚至是看log訊息，通通都能在這裡找到 在第一個資源頁籤，你能夠找到一些參考連結，除此之外，你也能夠看到所有能夠用於Voyager套件的文字樣式類別 在第二個指令頁籤，你能夠直接在後台執行一些Artisan指令，而不需要再透過SSH的命令列模式 最後在第三個logs頁籤，你能夠看到所有關於應用的log訊息，而不需要再透過FTP或檔案管理員等等傳統方式 你還能夠進行簡單的查詢過濾，下載log檔又或者是刪除它們 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"he-xin-guan-nian/jiao-se-yu-quan-xian.html":{"url":"he-xin-guan-nian/jiao-se-yu-quan-xian.html","title":"角色與權限","keywords":"","body":"角色與權限 Voyager內建了足夠好用的角色與權限設計。概念是每個使用者都有一個角色以及多個權限組合 在角色管理頁面，你能夠選擇去新增.編輯或刪除當前所有的角色。除此之外，當你點選要編輯某一個角色，你還能夠去編輯它所擁有的BREAD權限 在正式版本之後，Voayger的權限系統更貼近於Laravel的設計，這代表你能夠透過以下的方式來確認角色授權： // 透過用戶物件 $canViewPost = $user->can('read', $post); $canViewPost = Auth::user()->can('read', $post); // 透過控制器 $canViewPost = $this->authorize('read', $post); Voyager為你內建了以下這些權限： browse_admin: 使用者能否進入Voyager後台 browse_database:使用者能否檢視資料庫管理員介面 browse_bread: 使用者能否檢視BREAD介面 browse_media: 使用者能否檢視多媒體管理員介面 browse_menu: 使用者能否檢視選單管理員介面 browse_settings: 使用者能否檢視設定管理員介面 read_settings: 使用者能否檢視特定設定 edit_settings: 使用者能否編輯特定設定 add_settings: 使用者能否新增設定 delete_settings: 使用者能否刪除設定 除此之外，你也能為你自己的每一個BREAD類型去建立權限，它們各自都包含了檢視多筆.檢視單筆.編輯.新增與刪除權限 舉個例子來幫助你了解，比如你為products表格建立了它的BREAD類型，假如我們要為它來建立權限，它的權限key將會是browse_products. read_products. edit_products. add_products 以及 delete_products 注意 假如某個選單項目與任何BREAD相關，那麼它將會檢查browse權限。比如文章posts的BREAD選單項目，就會檢查 browse_posts權限。如果使用者沒有這個必須權限的話，該選單項目就會被隱藏 為某特定頁面來建立權限 比如你建立一個頁面，並且你只想給某些特定使用者角色來取用它，就能夠透過權限來進行設計 這只會在你的slug直接接在/admin(前題你沒改前綴的話)路徑之後才會有用。比如你有一個頁面路徑是/admin/foo/bar，那這個選單項目就無法作用 建立權限 首先，在permissions表格建立一筆資料，也就是一個新權限。如果想要參考這個權限類別的話，它的命名空間是(TCG\\Voyager\\Models\\Permission) 這筆新資料的tablename欄位應為空值null，至於key欄位會是類似browse{slug}這樣的格式，其中{slug}應該替換為你頁面的真實slug。 打個比方，要限制的頁面網址為/admin/create_bill，那你要建立的權限key就是browse_create_bill 設定權限 你可以在admin/roles這個路徑的頁面來確認你想要授予每一個角色的權限組合。在上面的例子你想找一個新的checkbox名為 \"Browse Create Bill\"，假如使用者沒有這個權限，也就是這個checkbox沒有打勾的話，要轉址到這個頁面的選單項目就會被隱藏 客製控制器 你能夠建立你自己的gate，關於gate的詳細說明請參考這裡 \\\\App\\Providers\\AppServiceProvider.php public function boot() { Gate::define(`browse_create_bill`, function ($user) { return $user->hasPermission(`browse_create_bill`); }); } 要在控制器裡頭去驗證權限，你可以這樣作： \\\\App\\Http\\Controllers\\SiteController.php public function index() { //驗證使用者是否有browse_create_bill權限，若無會拋出403錯誤 $this->authorize('browse_create_bill'); //通過驗證要執行的作業 如果你這樣作的話，請確保你有加入自定義的guard到你的控制器裡頭 根據我的測試，是不需要下面這段，就能啟動驗證的，不確定是否為作者的個人誤解 /** * Get the guard to be used during authentication. * * @return \\Illuminate\\Contracts\\Auth\\StatefulGuard */ protected function guard() { return Auth::guard(app('VoyagerGuard')); } 在你的視圖去使用權限檢查 你能夠使用Blade語法來檢查權限。比如說你想要去確認使用者能否檢視文章posts，只需要使用以下的語法： @can('browse', $post) I can browse posts @endcan 又或者你可以加入else的條件判斷，也是沒問題的，像這樣： @can('browse', $post) I can browse posts @else I cannot browse posts @endcan 回到剛剛的例子，如果只是要在視圖內確認使用者能否檢視建立帳單，只需要這樣寫： @can('browse_create_bill') 建立帳單 @endcan 是不是超級簡單的呢，沒錯吧 :) Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"he-xin-guan-nian/bang-zhu-han-shi.html":{"url":"he-xin-guan-nian/bang-zhu-han-shi.html","title":"幫助函式","keywords":"","body":"幫助函式 Voyager已經為你準備了一些工具函式，以下列出一些相信能加速你開發速度的函式 生成Voyager所管理多媒體素材的完整網址 預設所有被多媒體管理員控管的圖檔都會放置在storage/app/public的這個資料夾內，當你需要生成裡頭圖檔的網址，該怎麼作呢? 比方說在裡頭有個子資料夾名為images，裡面有個圖檔叫做dog.jpg，你可以在Blade使用以下程式碼來顯示該圖，簡單吧! 縮圖網址 還記得嗎?當你有加入相關的可選細項設定，Voyager將會為圖片輸入類型去生成縮圖。 在縮圖產生之後，當你想在視圖裡頭呈現縮圖又或者是生成取用網址時只要加入 Resizable 這個traits到你的模型裡頭，像這樣： \\\\App\\\\Models\\Post.php use TCG\\Voyager\\Traits\\Resizable; class Post extends Model { use Resizable; } 完成之後，當你想要呈現縮圖，只需要這麼寫： 顯示單一縮圖 thumbnail('resize-500','pic') ) }}\"> 上面的resize-500是縮圖名稱，也是在之前的可選細項所設定的 至於pic則是欄位名稱，假如你的欄位名稱剛好叫image，還可以進一步縮短成 thumbnail('resize-500') ) }}\"> 顯示多張縮圖 @php //將JSON內容轉成PHP陣列 $images = json_decode($article->pics); @endphp @foreach($images as $image) getThumbnail($image, 'resize-500')) }}\" /> @endforeach Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"he-xin-guan-nian/duo-yu-xi.html":{"url":"he-xin-guan-nian/duo-yu-xi.html","title":"多語系","keywords":"","body":"多語系 Voyager支持為你的模型加入多語系功能，要開啟這個功能，你需要先進行一些調整 第一步 你需要在config/voyager.php檔案內定義要支持的語系以及開啟多語系功能： 'multilingual' => [ 'enabled' => true, 'default' => 'en', 'locales' => [ 'en', 'da', ], ], 第二步你需要加入 Translatable Trait 到你的模型裡頭，並定義它的 translatable 屬性： \\\\App\\Models\\Post.php use TCG\\Voyager\\Traits\\Translatable; class Post extends Model { use Translatable; //要採用多語系的欄位有哪些 protected $translatable = ['title', 'body']; } 完成之後你將會在後台的BREAD頁面看到語言選擇器，如下圖所示 使用方法也非常簡單，你只需要切換語言頁籤之後，然後修改支持多語系的欄位內容，完成之後存檔。 等會再回來，當你再次切換語言頁籤，將會發現支持多語系的欄位內容會產生相應的改變，代表該欄位已經建立對應各語言的內容囉 用法 提前載入多語系資料 // 載入所有的多語系資料 $posts = Post::with('translations')->get(); // 載入所有的多語系資料 $posts = Post::all(); $posts->load('translations'); // 載入所有的多語系資料 $posts = Post::withTranslations()->get(); // 載入特定語系的多語系資料 $posts = Post::withTranslations(['en', 'da'])->get(); // 載入所有的多語系資料 $posts = Post::withTranslation('da')->get(); 取得預設語系的欄位內容 {{ $post->title }} 取得指定語系的欄位內容 {{ $post->getTranslatedAttribute('title', 'en', 'zh_TW') }} 取得英語的title欄位內容，如果找不到就改用繁體中文 假如你沒有定義語系，也就是第二參數的話，將使用應用的預設語系。假如你沒有定義備用語系，也就是第三參數的話，將使用應用的預設備用語系。 你會以字串的形式把語系代碼傳入第二與三參數，如果你想關閉備用語系，第三參數請傳入false 當模型欄位的預設語系與備用語系都找不到內容時，將會設定該欄位的內容為null，需要特別注意 翻譯整個模型 //第一參數為採用語系 //第二參數為替代語系 $post = $post->translate('zh_TW', 'en'); echo $post->title; echo $post->body; //你也可以對模型集合呼叫translate()，它會一次幫你翻譯集合裡的所有模型 $posts = $posts->translate('zh_TW', 'en'); echo $posts[0]->title; 確認該模型能否被翻譯 // 透過字串 if (Voyager::translatable(Post::class)) { // 可被翻譯 } // 透過模型物件或集合 if (Voyager::translatable($post)) { // 可被翻譯 } 動態設定欄位的語系內容 $post = $post->translate('zh_TW'); $post->title = '繁體標題內容'; $post->save(); 查詢可翻譯的模型 當要查詢翻譯內容，你能夠使用whereTranslation() 打個比方，如果你要查詢post的slug欄位，你可以使用以下程式碼 $post = Post::whereTranslation('slug','my-translated-slug'); 或者是加上等號的版本 $post = Post::whereTranslation('slug','=','my-translated-slug'); whereTranslation()接受以下的參數: 第一參數 field 你要查詢的欄位 第二參數 operator 查詢運算子，預設是=，和where一樣你可以搭配>. 第三參數 value 你要查詢的值 第四參數 locales 你要查詢哪些語系，以陣列形式提供，如果全查的話就傳入null 第五參數 default 連帶查詢預設語系，預設為true Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"zi-ding-yi-kai-fa/fu-xie-dang-an.html":{"url":"zi-ding-yi-kai-fa/fu-xie-dang-an.html","title":"複寫檔案","keywords":"","body":"複寫檔案 所謂複寫指的是撰寫同樣檔名的檔案，用以蓋掉同名的套件檔案。用以修改套件的預設行為或畫面 複寫各slug的BREAD視圖 這是自定義中最為常見的用途，建議學會 你能夠複寫任何的BREAD視圖，比如當你想要修改posts的BREAD視圖，就到resources/views/vendor/voyager/posts資料夾去放入複寫檔案 注意 找不到資料夾?不用擔心，預設是不會有這個資料夾的，請自己新增，不用擔心會爆炸，台灣還是會活的好好的 有4個檔案可以被複寫，分別是： browse.blade.php 瀏覽多筆頁面 edit-add.blade.php 新增/編輯頁面 read.blade.php 瀏覽單筆頁面 order.blade.php 排序頁面 假如你想要一次複寫所有slug的BREAD視圖，則是把上面的檔案改放到resources/views/vendor/voyager/bread 注意 找不到資料夾?不用擔心，預設可能不會有這個資料夾，請自己新增 使用自定義控制器 複寫提交按鈕 假如你只是想要修改edit-add.blade.php的提交按鈕，是不需要改寫整個視圖的，只需要將你的edit-add.blade.php檔案改成這樣即可 @extends('voyager::bread.edit-add') @section('submit-buttons') @parent 儲存並發佈 @endsection 如何使用自定義控制器 你能夠複寫某一個BREAD的控制器，方法是建立一個繼承Voyager控制器的控制器，下面給你個例子： \\\\App\\Http\\Controllers\\MyVoyagerCgyController.php 接著到該slug的BREAD設定頁，以上例來說就是cgys(我知道這個命名不好，不合英文語法，我自己去罰站)，將控制器類別名稱連帶完整命名空間填入控制器名稱欄位內 你現在可以複寫VoyagerBaseController裡頭的所有方法了，詳情看這裡 直接複寫Voyager控制器 警告 只有在你知道自己在做什麼，並有辦法自己處理問題才這麼作!!Voyager並不建議你這麼作，另外有個問題是當Voyager日後更新也會有同步問題 假如你想要複寫任何Voyager的核心控制器，你要先去改變Voyager設定檔案voyager.php \\\\config/voyager.php /* |-------------------------------------------------------------------------- | Controllers config |-------------------------------------------------------------------------- | | Here you can specify voyager controller settings | */ 'controllers' => [ 'namespace' => 'App\\\\Http\\\\Controllers\\\\Voyager', //這裡填入你的複寫檔案所在路徑，建議就寫這個 ], 下一步開啟Terminal，輸入 php artisan voyager:controllers Voyager將會把所有核心控制器檔案內容複製一份到 app\\Http\\Controllers\\Voyager 路徑裡頭，你就可以去修改程式碼囉 複寫Voyager模型 如果你願意，也可以複寫Voyager內建的模型 你需要加入以下程式碼到 AppServiceProvider.php 的 register(): Voyager::useModel($name, $object); 第一參數的$name為模型的類別名稱 第二參數的$object則是你自定義模型的帶命名空間類別 直接看範例，你會更清楚 \\\\App\\Providers\\AppServiceProvider.php 下一步是你要去建立自己的模型並讓它繼承要複寫的模型，比如是 DataRow: \\\\App\\Models\\MyDataRow.php 假如你所複寫的這個模型是和BREAD有關的，記得到你要複寫模型的BREAD設定頁，並替換成你的新模型名稱帶命名空間，這個別忘了，不然會找不到北。 例如，假如你要複寫的是Voyager的Menu模型，改用你的App\\Models\\MyMenu.php模型 問題 我在嘗試複寫Menu後，會出現要進入選單建構器頁面卻顯示403權限不足的錯誤，原因不明，先作紀錄 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"zi-ding-yi-kai-fa/fu-xie-lu-you.html":{"url":"zi-ding-yi-kai-fa/fu-xie-lu-you.html","title":"複寫路由","keywords":"","body":"複寫路由 你能夠複寫任何Voyager自帶的路由規則，作法是把你要複寫的路由寫在Voyager::routes()後面 比如說假如你想要複寫登錄相關的控制器，就可以這樣作 \\\\routes\\web.php Route::group(['prefix' => 'admin'], function () { Voyager::routes(); //你要複寫的路由寫在這裡 Route::post('login', ['uses' => 'MyAuthController@postLogin', 'as' => 'postlogin']); }); Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"zi-ding-yi-kai-fa/e-wai-de-css-yu-js-dang-an.html":{"url":"zi-ding-yi-kai-fa/e-wai-de-css-yu-js-dang-an.html","title":"額外的CSS與JS檔案","keywords":"","body":"額外的CSS與JS檔案 在新版本的Voyager，你能夠加入額外的CSS與JS檔案到Voyager的父視圖(意味著每一個後台畫面都會吃到)而不需要透過複寫或修改視圖本身 因此你就不用再為之後的更新或搬移問題而頭痛，另外CSS和JS檔案會在其他Voyager素材被載入後才加入，所以它們的優先層級會是較高的，因此你不用擔心自定義樣式被覆蓋或功能因載入順序導致的問題 這些工作都將由voyager.php設定檔來負責，所以你只需要把要加入的CSS和JS檔案路徑寫在設定裡頭即可，下面給你個例子參考： \\\\config\\voyager.php 'additional_css' => [ //'css/custom.css', //檔案路徑 public/css/custom.css ], 'additional_js' => [ //'js/custom.js', //檔案路徑 public/js/custom.js ], 提示 這些路徑將被傳進Laravel的asset()，因此到public前的路徑就不用寫了，它會自動生成 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"zi-ding-yi-kai-fa/qi-dong-laravel-ruan-shan-chu.html":{"url":"zi-ding-yi-kai-fa/qi-dong-laravel-ruan-shan-chu.html","title":"啟動Laravel軟刪除","keywords":"","body":"啟動Laravel軟刪除 所謂軟刪除指的是當執行刪除資料動作時，並不會真的把資料從表格中移除，只是在deleted_at這樣的欄位去註記刪除時間，也就代表了這筆資料視作被刪除 被軟刪除的資料無法被正常的查詢語法找到，但實際上資料還是存在的，真要查詢軟刪除資料需要下特別的語法 Voyager只是協助為你的模型啟動軟刪除功能，所以關於軟刪除的操作請參考Laravel文件，請看這裡 Voyager裡頭的表格設定 當使用資料庫管理員進行一個新表的時候，你可以按\"添加軟刪除\"按鈕來新增deleted_at欄位。接著當你為表格加入BREAD功能，並指定其模型類別之後，你最後只需要去編輯該模型類別去啟動軟刪除功能 預設的模型類別長得像這樣: 請改成下面的版本 就這樣，從此每當你透過Eloquent來刪除這個表格的資料，資料將不會真的被刪除，而只是把刪除當前時間寫入deleted_at欄位，作為標記該資料被刪除 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"zi-ding-yi-kai-fa/zi-ding-yi-guan-xi-shu-xing.html":{"url":"zi-ding-yi-kai-fa/zi-ding-yi-guan-xi-shu-xing.html","title":"自定義關係屬性","keywords":"","body":"自定義關係屬性 在Voyager 1.1版本之後，你就能夠定義額外屬性作為關係來顯示 舉個例子說明，每個文章Post都有作者User，而你希望顯示作者的全名。為了達成這個目的，需要先定義一個Accessor(Java稱為getter)如下： \\\\App\\Models\\User.php public function getFullNameAttribute() { return \"{$this->first_name} {$this->last_name}\"; } 接著，我們需要告訴Voyager有個Accessor我們想要使用，同樣在User.php裡頭加入： \\\\App\\Models\\User.php public $additional_attributes = ['full_name']; 記得屬性名稱會根據蛇底式命名法來調整，也是每個單字間用_隔開，單字首字母為小寫 就這樣，你現在能在顯示關係內容時改用 full_name囉！ Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"zi-ding-yi-kai-fa/jia-ru-zi-ding-yi-shu-ru-xiang.html":{"url":"zi-ding-yi-kai-fa/jia-ru-zi-ding-yi-shu-ru-xiang.html","title":"加入自定義輸入項","keywords":"","body":"加入自定義輸入項 這是我最常作也最喜歡的自定義技巧 是否還記得，在BREAD設定頁面，你能夠指定每個欄位所要採用的輸入項，雖然Voyager已經提供非常多元的輸入項，但其實你還是可以根據需要擴增自己的輸入項，這個環節就是告訴你該怎麼去作 你能夠輕鬆的加入一個新輸入項到Voyager裡頭。這裡示範如何加入一個數字輸入項 這裡新增數字輸入項只是因為較不複雜容易說明，事實上Voyager內建就有數字輸入項囉 首先建立一個新類別到專案裡頭，放在哪個資料夾都沒差，為了好整理，建立App\\FormFields資料夾來存放，取名為NumberFormField \\\\App\\FormFields\\NumberFormField.php $row, 'options' => $options, 'dataType' => $dataType, 'dataTypeContent' => $dataTypeContent ]); } } $codename變數是用來顯示在Bread設定頁的下拉選單，有支持中文。至於createContent()將用來回傳要顯示的輸入項視圖，其實就是input標籤 接下來我們就要動手製作這個輸入項視圖，在resources/views資料夾裡頭建立一個formfields資料夾，並在裡面新增number.blade.php，內容如下： field }}\" data-name=\"{{ $row->display_name }}\" @if($row->required == 1) required @endif step=\"any\" placeholder=\"{{ isset($options->placeholder)? old($row->field, $options->placeholder): $row->display_name }}\" value=\"@if(isset($dataTypeContent->{$row->field})){{ old($row->field, $dataTypeContent->{$row->field}) }}@else{{old($row->field)}}@endif\"> 你可以根據自己的需要加入商業邏輯，或試著修改它看看 不用氣餒 如果剛接觸網頁程式或Laravel的新手，可能對這段程式碼不是太懂。現在你只要知道這一段最終只是要呈現出單純的HTML輸入標籤，你看不懂的部分只是從Laravel取得資料而已，你可以試著改看看，慢慢就能掌握囉 當輸入項視圖完成後，我們還要告訴Voyager有一個新的輸入項需要被載入。我們需要在Service Provider來進行這個動作，一般來說最常用的就是AppServiceProvider \\\\App\\Providers\\AppServiceProvider.php 最後，你就能看到在輸入項下拉選單多個數字輸入項可以使用囉，超酷! Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"zi-ding-yi-kai-fa/jing-wei-du-coordinates.html":{"url":"zi-ding-yi-kai-fa/jing-wei-du-coordinates.html","title":"經緯度 Coordinates","keywords":"","body":"經緯度 Coordinates 這個功能我目前還沒有需求要用到，所以也不確定使用，先將官方文件翻譯出來 透過Voyager你能夠儲存經緯度並從地圖來讀入數據，首先你需要確定要儲存經緯度的欄位資料型態應為GEOMETRY或者是POINT 接著你要把 Spatial-Trait 這個 trait 引入到你的模型裡頭，並定義該欄位： \\\\App\\Models\\Category.php 現在你可以到表格的BREAD設定頁，去把這個欄位的輸入項設為Coordinates，接著你將會得到一個地圖用來選擇經緯度之用 注意 請確保你有設定 Google Maps 的API金鑰到Voyager設定檔裡頭，否則這功能無法正常執行，除此之外，這裡也可以讓你去定義預設的地圖中心位置 取得經緯度 你能夠從模型實例去取得經緯度資料，透過呼叫以下方法 $model->getCoordinates(); 這將回傳一個經緯度名值對陣列，經度的key為lng，而緯度的key則是lat Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"zi-ding-yi-kai-fa/bread-accessor.html":{"url":"zi-ding-yi-kai-fa/bread-accessor.html","title":"Bread Accessor","keywords":"","body":"Bread Accessor 有時候你會需要格式化屬性，卻又希望只影響部分的 BREAD 功能 舉個例子，假如你有一個name欄位，而在全覽頁也就是Browse，你希望在這個欄位為空值時你希望能改成顯示無名氏，那你可以在模型加入以下程式碼： \\\\App\\Models\\User.php name ?? '無名氏'; } 這樣當name欄位為空值null時，會得到的值變成是無名氏。但問題是這是對所有行為在取用name屬性都造成影響，很容易造成其他問題 下面繼續說明如何只針對指定特定行動來進行修改，比如剛才的例子是Browse 請將剛才的程式碼微調成下面的版本，也就是在方法名稱加上Browse，現在這段程式碼只有在Browse頁面才會生效 \\\\App\\Models\\User.php name ?? '無名氏'; } 其他頁面都有類似的作法可以採用，如下面所列： \\\\App\\Models\\User.php Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"zi-ding-yi-kai-fa/zi-ding-yi-guard.html":{"url":"zi-ding-yi-kai-fa/zi-ding-yi-guard.html","title":"自定義Guard","keywords":"","body":"自定義Guard 在Voyager 1.2版本開始，你能夠定義guard並用在整個Voyager裡面 你需要把你的auth-guard名稱榜定到 VoyagerGuard 首先，請確保你有定義好一個guard，詳情請參考Laravel文件，請點這裡 接著開啟AuthServiceProvider類別並加入以下程式碼到register()裡頭： \\\\App\\Providers\\AuthServiceProvider.php public function register(){ $this->app->singleton('VoyagerGuard', function () { return 'your-custom-guard-name'; }); } 注意 你可以會找不到register()，那就請自己新增沒關係 現在將會改成這個guard而非預設的 這裡示範一個例子因為使用不同的模型和表格來處理後台登入所以需要自定義Guard 首先，建立一個名為admins的表格，Migration檔案的表格結構寫成這樣 bigIncrements('id'); $table->bigInteger('role_id')->unsigned()->nullable(); $table->string('name'); $table->string('email')->unique(); $table->string('avatar')->nullable()->default('users/default.png'); $table->string('password')->nullable(); $table->string('remember_token')->nullable(); $table->text('settings')->nullable()->default(null); $table->timestamps(); $table->foreign('role_id')->references('id')->on('roles'); }); 接下來建立一個名為Admin的模型類別，繼承Voyager的User模型： 下一步，建立一個名為admin的guard，以及一個名為admins的使用者供應器，編輯config/auth.php設定檔 //config/auth.php 'guards' => [ 'admin' => [ 'driver' => 'session', 'provider' => 'admins', ], // ... ], 'providers' => [ 'admins' => [ 'driver' => 'eloquent', 'model' => App\\Admin::class, ], // ... ], 下一步，你需要告訴Voyager去使用你的新guard，開啟AppServiceProvider.php(不是AuthServiceProvider.php，我猜兩個應該都可以，只是時間先後的差別)，加入以下程式碼： \\\\App\\Providers\\AppServiceProvider.php public function register() { $this->app->singleton('VoyagerGuard', function () { return 'admin'; }); } 注意 使用者BREAD設定依然會去管理users表格，而非 admins 。你需要自己去為admins表格去建立BREAD功能 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"zi-ding-yi-kai-fa/hang-dong-an-niu.html":{"url":"zi-ding-yi-kai-fa/hang-dong-an-niu.html","title":"行動按鈕","keywords":"","body":"行動按鈕 行動按鈕會顯示在Browse頁面，每一筆資料的右方 你可以加入自己的按鈕，一點都不難喔 首先，我們將建立一個 Action 類別繼承自 Voyager的 AbstractAction，比方命名為MyAction.php，如下所列： \\\\App\\Actions\\MyAction.php 'btn btn-sm btn-primary pull-right', ]; } //定義按鈕連結 public function getDefaultRoute() { return route('my.route'); } } 注意 請特別注意這裡有用到一個名為my.route，你需要改為專案裡頭存在的路由名稱，否則會報出找不到路由的錯誤 下一步，我們需要告訴 Voyager 要使用這個 Action。為此，再度開啟AppServiceProvider.php，修改 boot()，如下所示： \\\\App\\Providers\\AppServiceProvider.php 完成後你將會看到新按鈕將會出現所有表格的Brose頁面 顯示/隱藏行動按鈕 假如你只需要這個行動按鈕出現在特定的檔案型態，比如Post，那麼你可以在Action類別去實作函式shouldActionDisplayOnDataType() \\\\App\\Actions\\MyAction.php dataType->slug == 'posts'; } 批量行動 批量行動是用於多筆的模型實例，假如你的行動需要批量操作，比如一次刪除或修改多筆使用者選定的資料，只要實作以下方法： \\\\App\\Actions\\MyAction.php Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"wen-ti-pai-chu-1/rang-ni-de-wang-zhi-zhi-chi-https-xie-ding.html":{"url":"wen-ti-pai-chu-1/rang-ni-de-wang-zhi-zhi-chi-https-xie-ding.html","title":"讓你的網址支持HTTPS協定","keywords":"","body":"讓你的網址支持HTTPS協定 症狀：當透過HTTPS來訪問網站，來自Voyager管理的圖片都無法正常載入 原因：圖片網址是被Voyager透過以下程式碼來生成的： Storage::disk(config('voyager.storage.disk'))->url($file); 假如voyager.storage.disk是設定為 public(預設就是這個)，而且public也是Laravel預先所使用的資料夾，就是storage/app/public這個路徑，那麼url屬性在磁碟設定會是如下： 'url' => env('APP_URL').'/storage', 懶人包就是，如果你在.env檔案裡頭所設定的APP_URL首頁網址不是HTTPS協定的話，所生成的圖片網址同樣也不會是HTTPS協定 解法： 如果你從public磁碟設定裡把env('APP_URL')這段給拿掉，之後圖片生成網址將會變成相對網址，就一定會使用訪客所用的網域以及協定 假如你需要的是完整的URL，你可以在Voyager::image('...')程式碼的外面再包一個asset()，就像下面這樣： asset(Voyager::image('...')) 這樣就會根據訪客的網域以及協定來生成完整的圖片網址 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-02 16:23:39 "},"wen-ti-pai-chu-1/que-shao-bi-yao-can-shu.html":{"url":"wen-ti-pai-chu-1/que-shao-bi-yao-can-shu.html","title":"缺少必要參數","keywords":"","body":"缺少必要參數 症狀：你得到一個錯誤頁面顯示 Missing required parameters for [Route...] 原因：這有2個可能原因造成 你的表格缺少主鍵 你的表格有主鍵，但名字不叫做id，你又沒有在模型裡面進行設定 解法： 原因1的解法就是為了表格建立主鍵 原因2的解法就是在模型裡面去告知正確的主鍵欄位名稱 \\\\App\\Models\\Article.php $primaryKey = 'your_primary_key'; 更多相關內容，請參考Laravel的Eloquent Model Conventions，請看這裡 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-01 22:16:52 "},"wen-ti-pai-chu-1/problem-3.html":{"url":"wen-ti-pai-chu-1/problem-3.html","title":"無法進入後台，也沒出現任何錯誤","keywords":"","body":"無法進入後台，也沒出現任何錯誤 症狀：能夠正常登入，但是無法進入後台，一直被轉回前台 原因：Voyager後台的權限是透過permissions.permission_role這些管理權限的表格來判斷使用者有無權限進入後台，如果沒有的話是會被轉回前台的 所以如果登入沒有問題，但是進不了後台，一般會是兩個可能原因 所登入的角色不預備browse_admin權限(假如你沒改的話) 你的權限表格裡頭沒有任何權限資料 解法： 原因1的解法就是為登入角色加上browse_admin權限 原因2的解法就是重新執行一次 php artisan voyager:install來生成資料 Copyright © Goblin Lab Studio 2021 all right reserved，powered by Gitbook該文件修訂時間： 2021-01-02 16:30:20 "}}